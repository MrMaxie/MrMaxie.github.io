---
import { getCollection } from 'astro:content';
import { formatDate, toJsDate } from '~/utils/date';
import Tags from './Tags.astro';
import Routes from '~/utils/routes';
import ArticleSummary from './ArticleSummary.astro';

type Props = {
    currentTitle: string;
    tags: string[];
    date: string;
};

const { currentTitle, tags, date } = Astro.props;

const articles = await getCollection('articles');

const allEntries = [...articles];

const currentPostDate = toJsDate(date);
const currentPostTags = tags;

const allDates = allEntries
    .filter(x => x.data.title !== currentTitle && formatDate(x.data.date) !== date)
    .map(x => toJsDate(x.data.date).getTime());

const minDate = Math.min(...allDates);
const maxDate = Math.max(...allDates);

const dateRange = maxDate - minDate || 1;

const allScorings = allEntries
    .filter(x => x.data.title !== currentTitle && formatDate(x.data.date) !== date)
    .map(entry => ({
        id: entry.id,
        date: toJsDate(entry.data.date),
        tags: entry.data.tags,
    }))
    .map(entry => {
        const entryDate = entry.date.getTime();
        const dateScore = ((entryDate - minDate) / dateRange) * 4;

        const matchingTagsCount = entry.tags.filter(tag => currentPostTags.includes(tag)).length;
        const tagScore = (matchingTagsCount / currentPostTags.length) * 5;

        const freshnessBonus = entryDate > currentPostDate.getTime() ? 1.5 : 0;

        const totalScore = dateScore + tagScore + freshnessBonus;

        return {
            ...entry,
            score: totalScore,
        };
    });

const topEntries = allScorings
    .sort((a, b) => b.score - a.score)
    .slice(0, 2)
    .map(entry => allEntries.find(x => x.id === entry.id))
    .filter(Boolean);

const getCorrectUrl = (entry: { slug: string; collection: string; }) => {
    switch (entry.collection) {
        case 'articles':
            return Routes.article(entry.slug);
        default:
            // This should never happen
            return '/';
    }
};
---

{topEntries.length > 0 && (
    <div class="related-articles">
        <h2>Related Articles</h2>

        {topEntries.map(entry => (
            <ArticleSummary
                title={entry.data.title}
                date={formatDate(entry.data.date)}
                tags={entry.data.tags}
                href={getCorrectUrl(entry)}
                description={entry.data.description}
            />
        ))}
    </div>
)}

<style scoped lang="scss">
    .related-articles {
        margin-top: 3rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;

        h2 {
            font-size: 1.5rem;
        }

        .card {
            padding: 1rem;
            border: 1px solid var(--background-variant);
            border-radius: 0.5rem;
            text-decoration: none;
            color: var(--text);
            transition: background-color 0.2s;
            display: flex;
            flex-direction: column;
            gap: 0.5rem;

            &:hover {
                background-color: var(--background-variant);
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            }

            h3 {
                margin-bottom: 0.5rem;
            }

            .meta {
                font-size: 0.9rem;
                color: var(--text-dim);

                > span:not(:last-child):after {
                    content: 'â€¢';
                    margin: 0 0.5rem;
                }
            }
        }
    }
</style>