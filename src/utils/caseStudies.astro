---
import type { AstroInstance } from 'astro';

type Args = {
    exceptSlugs?: string[];
    max?: number;
    /**
     * @default 'random'
     */
    sortMethod?: 'date' | 'random';
};

export const getCaseStudies = async (args?: Args) => {
    const { exceptSlugs, max, sortMethod = 'random' } = args || {};

    let posts = await Astro.glob<{
        frontmatter: {
            slug: string;
            title: string;
            description: string;
            date: string;
            cover: string;
            tags: string[];
        };
        path: string;
        default: AstroInstance['default'];
    }>('~content/case-studies/*/index.astro');

    if (exceptSlugs) {
        posts = posts.filter(post => !exceptSlugs.includes(post.frontmatter.slug));
    }

    if (max) {
        posts = posts.slice(0, max);
    }

    if (sortMethod === 'date') {
        posts = posts.sort((a, b) => {
            return new Date(b.frontmatter.date).getTime() - new Date(a.frontmatter.date).getTime();
        });
    } else {
        posts = posts.sort(() => Math.random() - 0.5);
    }

    return posts.map(post => ({
        ...post,
        path: `/case-studies/${post.frontmatter.slug}`,
    }));
};
---